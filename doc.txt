
CollectiveService
  #find_succesful_collectives
[32m    should include #<Collectives::Collective:0x0000559ffb05b9a0 @slug="slug_1", @currency="EUR", @image="http://example.com/test.png", @balance=950, @yearly_income=2000, @backers_count=100, @contributors_count=200>[0m
[32m    should not include #<Collectives::Collective:0x0000559ffb142c88 @slug="slug_11", @currency="EUR", @image="http://example.com/test.png", @balance=950, @yearly_income=2000, @backers_count=100, @contributors_count=50>[0m
  #find_upcoming_collectives
[32m    should include #<Collectives::Collective:0x0000559ffb209b08 @slug="slug_20", @currency="EUR", @image="http://example.com/test.png", @balance=950, @yearly_income=2000, @backers_count=100, @contributors_count=50>[0m
[32m    should not include #<Collectives::Collective:0x0000559ffb2a4860 @slug="slug_28", @currency="EUR", @image="http://example.com/test.png", @balance=950, @yearly_income=2000, @backers_count=100, @contributors_count=200>[0m

FinancialInspectionService
  #calculate_total_assets
[32m    should include {"USD" => (a value > 0)}[0m

Collectives::LowContributorsSpecification
  behaves like a specification
    #satisifes?
      canidate satisfies
[32m        should be truthy[0m
      canidate does not satisfy
[32m        should be falsy[0m

Collectives::SuccessfulCollectiveSpecification
  behaves like a specification
    #satisifes?
      canidate satisfies
[32m        should be truthy[0m
      canidate does not satisfy
[32m        should be falsy[0m

Collectives::UpcomingCollectiveSpecification
  behaves like a specification
    #satisifes?
      canidate satisfies
[32m        should be truthy[0m
      canidate does not satisfy
[32m        should be falsy[0m

CollectiveRepoFake
[32m  should respond to #find_by_slug with 1 argument[0m
[32m  should respond to #all with 0 arguments[0m
[32m  should respond to #find_by with 1 argument[0m
[32m  should respond to #known_collectives with 0 arguments[0m
  #find_by_slug
    when collective exists
[32m      should be a kind of Collectives::Collective[0m
    when collective does not exists
[32m      raises a Repo::EntityNotFound error[0m
  #all
[32m    should be a kind of Enumerable[0m
[32m    should not be empty[0m
[32m    should all be a kind of Collectives::Collective[0m
  #find_by
[32m    should be a kind of Enumerable[0m
[32m    should not be empty[0m
[32m    should all be a kind of Collectives::Collective[0m

Collectives::CollectiveRepo
[32m  should respond to #find_by_slug with 1 argument[0m
[32m  should respond to #all with 0 arguments[0m
[32m  should respond to #find_by with 1 argument[0m
[32m  should respond to #known_collectives with 0 arguments[0m
  #find_by_slug
    when collective exists
[32m      should be a kind of Collectives::Collective[0m
    when collective does not exists
[32m      raises a Repo::EntityNotFound error[0m
  #all
[32m    should be a kind of Enumerable[0m
[32m    should not be empty[0m
[32m    should all be a kind of Collectives::Collective[0m
  #find_by
[32m    should be a kind of Enumerable[0m
[32m    should not be empty[0m
[32m    should all be a kind of Collectives::Collective[0m

OpenCollective::Client
  #find_by_slug
[32m    should be a kind of OpenCollective::Response[0m
    #error
[32m      should be nil[0m
    #success?
[32m      should be truthy[0m
    .data
[32m      should include {"slug" => (be a kind of String), "currency" => (be a currency code), "image" => (start with "http"), "balance" => (be a kind of Integer), "yearlyIncome" => (be a kind of Integer), "backersCount" => (be a kind of Integer), "contributorsCount" => (be a kind of Integer)}[0m

Finished in 5.51 seconds (files took 0.23136 seconds to load)
[32m39 examples, 0 failures[0m

